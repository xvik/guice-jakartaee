plugins {
    id 'ru.vyarus.github-info' version '1.5.0' apply false
    id 'com.netflix.nebula.jakartaee-migration' version '0.3.0' apply false

    id 'java-platform'
    id 'ru.vyarus.java-lib' version '2.4.0'
    id 'net.researchgate.release' version '3.0.2'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'com.github.ben-manes.versions' version '0.46.0'
}

wrapper {
    gradleVersion = '7.6.1'
}

// BOM
dependencies {
    constraints {
        project.subprojects.each { api it }
    }
}

javaLib {
    // publish root BOM as custom artifact
    bom {
        artifactId = 'guice-bom'
        description = 'Guice (jakartaee) BOM'
    }
}

allprojects {
    apply plugin: 'project-report'
    apply plugin: 'ru.vyarus.github-info'
    apply plugin: 'ru.vyarus.java-lib'
    apply plugin: 'signing'

    description = 'Google guice repackaged for jakartaee'

    repositories { mavenCentral() }

    ext {
        guice = '5.1.0'
        hk2 = '3.0.3'
    }

    group 'ru.vyarus.guice.jakarta'

    github {
        user = 'xvik'
        license = 'MIT'
        repository = 'guice-jakartaee'
    }

    // don't publish gradle metadata artifact
//    javaLib.withoutGradleMetadata()

    // skip signing for jitpack (snapshots)
    tasks.withType(Sign) { onlyIf { !System.getenv('JITPACK') } }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.netflix.nebula.jakartaee-migration'

    sourceCompatibility = 1.8

    jakartaeeMigration {
        migrate()
    }

    // extra confguration to merge into main jar
    configurations.create('shadowed') {
        extendsFrom(configurations.compileOnly)
    }

    // Nullable annotations are not converted (yet?)
//    dependencies {
//        api 'jakarta.annotation:jakarta.annotation-api:2.1.1'
//    }

    def convertSources = tasks.register('convertSources', Copy) {
        configurations.shadowed.asFileTree.each {
            from(zipTree(it)) {
                include '**/*.java'
            }
        }
        includeEmptyDirs = false
        into 'build/shadowed/src/main/java/'
    }

    def convertResources = tasks.register('convertResources', Copy) {
        configurations.shadowed.asFileTree.each {
            from(zipTree(it)) {
                exclude '**/*.java'
            }
        }
        includeEmptyDirs = false
        into 'build/shadowed/src/main/resources/'
    }

    sourceSets.main.java.srcDir convertSources
    sourceSets.main.resources.srcDir convertResources

    javaLib {
        // java 9 auto module name
        autoModuleName = name.replace('guice-', 'com.google.guice.extensions.')
        // use only direct dependencies in the generated pom, removing BOM mentions
        pom.removeDependencyManagement()
    }

    // replication of original META
    jar {
        manifest {
            attributes 'Bundle-Copyright': 'Copyright (C) 2006 Google Inc.',
                    'Bundle-Description': 'Guice is a lightweight dependency injection framework for Java 8 and above',
                    'Bundle-DocURL': 'https://github.com/google/guice',
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-ManifestVersion': '2',
                    'Bundle-Name': project.name,
                    'Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8',
                    'Bundle-SymbolicName': project.name.replace('guice-', 'com.google.inject.'),
                    'Bundle-Vendor': 'Google, Inc.',
                    'Bundle-Version': parent.guice,
                    'Eclipse-ExtensibleAPI': 'true',
                    'Require-Capability': 'osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=1.8))"'

        }
    }

    // silent javadoc errors
    tasks.withType(Javadoc).tap {
        configureEach {
            failOnError false
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('charSet', 'UTF-8')
        }
    }
}

// dependency on all subprojects required for release validation
check.dependsOn subprojects.check

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('sonatypeUser')
            password = findProperty('sonatypePassword')
        }
    }
}

// Required signing properties for release: signing.keyId, signing.password and signing.secretKeyRingFile
// (https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials)

release.git.requireBranch.set('master')

// release manages only root project (subprojects will be checked and released implicitly)
afterReleaseBuild {
    dependsOn 'publishToSonatype'
    dependsOn subprojects.collect { ":$it.name:publishToSonatype" }
    dependsOn 'closeAndReleaseSonatypeStagingRepository'
    doLast {
        logger.warn "RELEASED $project.group:$project.name:$project.version"
    }
}
